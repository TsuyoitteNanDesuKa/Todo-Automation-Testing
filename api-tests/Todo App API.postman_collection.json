{
	"info": {
		"_postman_id": "03e20262-3967-42cd-b7d9-1a012f4029cc",
		"name": "Todo App API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "47097446",
		"_collection_link": "https://tsuyoittenandesuka-6021898.postman.co/workspace/Enes's-Workspace~fb7e3e10-1c2a-4acb-802e-c69f14c932e2/collection/47097446-03e20262-3967-42cd-b7d9-1a012f4029cc?action=share&source=collection_link&creator=47097446"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "Happy Path",
					"item": [
						{
							"name": "Login (valid)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response should have a token\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.token).to.exist;\r",
											"    pm.expect(jsonData.token).to.be.a('string');\r",
											"});\r",
											"\r",
											"pm.test(\"Set auth token for next requests\", function() {\r",
											"    const jsonData = pm.response.json();\r",
											"    if (jsonData.token) {\r",
											"        pm.environment.set(\"authToken\", jsonData.token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{validUsername}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative tests",
					"item": [
						{
							"name": "Login (invalid username)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code should be 401 Unauthorized\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should contain error message for invalid credentials\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.message).to.eql(\"Invalid credentials\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"invalid username\",\r\n    \"password\": \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login (invalid password)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code should be 401 Unauthorized\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should contain error message for invalid credentials\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.message).to.eql(\"Invalid credentials\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{validUsername}}\",\r\n    \"password\": \"invalid password\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Create",
			"item": [
				{
					"name": "Happy path",
					"item": [
						{
							"name": "Create Todo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is correct and contains new todo\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.have.property('id');\r",
											"    pm.expect(responseData).to.have.property('text', 'postman entity');\r",
											"    pm.expect(responseData).to.have.property('completed', false);\r",
											"    pm.environment.set(\"createdTodoId\", responseData.id);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"postman entity\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/items",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"items"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative tests",
					"item": [
						{
							"name": "Create Todo (empty text)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code should be 400 Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should contain error message for empty text\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.message).to.eql(\"Empty text error\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/items",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"items"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Get",
			"item": [
				{
					"name": "Happy path",
					"item": [
						{
							"name": "Get All Todos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is an array\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/items",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"items"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative tests",
					"item": [
						{
							"name": "Get All Todos (no authorization)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is an array\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/items",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"items"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Update",
			"item": [
				{
					"name": "Happy Path",
					"item": [
						{
							"name": "Update Todo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Todo text has been updated\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.have.property('text', 'Postman ile test guncellendi');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"test updated via postman\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/items/{{createdTodoId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"items",
										"{{createdTodoId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative tests",
					"item": [
						{
							"name": "Update Todo (invalid id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code should be 404 Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should contain not found message\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.message).to.eql(\"Todo not found\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"this todo does not exist\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/items/99999",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"items",
										"99999"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Delete",
			"item": [
				{
					"name": "Happy Path",
					"item": [
						{
							"name": "Delete Todo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response message indicates deletion\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.have.property('message', 'Todo deleted');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/items/{{createdTodoId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"items",
										"{{createdTodoId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative tests",
					"item": [
						{
							"name": "Delete Todo (invalid id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code should be 404 Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should contain not found message\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.message).to.eql(\"Todo not found\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/items/999999",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"items",
										"999999"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}